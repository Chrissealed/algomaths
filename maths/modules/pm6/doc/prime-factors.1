.\" Automatically generated by Pandoc 2.1.2
.\"
.TH "" "" "" "" ""
.hy
.SH NAME
.PP
class \f[B]PrimeFactors\f[] in \f[B]algomaths\f[] Perl6 modules :
maths/modules/pm6/\f[B]prime\-factors.pm6\f[]
.SH AUTHOR
.PP
https://github.com/Chrissealed/algomaths.git
.SH VERSION
.PP
2019.01.07
.SH Ce module contient un rôle : `PrimeFactors'
.PP
destiné à établir la liste des facteurs premiers d'un entier différent
de 0, c'est\-à\-dire de le décomposer en facteurs premiers.
.PP
Il contient deux méthodes, la première :
.SS breakdown(Int:D $integer is copy where { ($integer != 0) or die
\[lq]Argument invalide! Nombre entier différent de 0 requis.\[rq] }
\[en]> Hash:D)
.PP
avec \f[B]$integer\f[] différent de 0 qui renvoie un \f[B]Hash\f[]
comprenant le mappage des nombres avec leurs facteurs.
Il affiche ce mappage sous plusieurs formes : en tableau associatif
(Hash) clé => valeur, en facteurs successifs puis en facteurs élevés à
la puissance requise.
.PP
Le rôle possède en outre un attribut requis destiné à écrire dans un
fichier les informations qui apparaissent à l'écran et qui décrivent les
différentes étapes des opérations.
Il s'agit de \f[B]Teeput::Tput $t is required is rw\f[] : il faut lui
passer un objet de type \f[B]Teeput::Tput\f[] du module
\f[B]teeput.pm6\f[].
Référez\-vous à la doc de ce module pour plus d'informations.
.SS La deuxième méthode : reduce\-fractions\-prime\-factors(Int:D
\@numerators is copy, Int:D \@denominators is copy, Int:D $return\-array
\[en]> Array:D)
.PP
qui prend 2 tableaux de \f[B]Int\f[] en arguments et délivre pour chacun
des 2 tableaux un troisième et quatrième tableau contenant les valeurs
qui se trouvent dans l'un des tableaux et pas dans l'autre.
Selon la valeur de l'argument \f[B]$return\-array\f[] (1 ou 2), le
premier tableau ou le deuxième tableau sera retourné, pour disposer des
valeurs contenues dans les 2 tableaux, il faudra faire deux appels avec
une valeur différente de \f[B]$return\-array\f[] pour chacun d'eux.
