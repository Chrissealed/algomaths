.\" Automatically generated by Pandoc 2.1.2
.\"
.TH "" "" "" "" ""
.hy
.SH NAME
.PP
class \f[B]ArePrime\f[] in \f[B]algomaths\f[] Perl6 modules :
maths/modules/pm6/\f[B]are\-prime.pm6\f[]
.SH AUTHOR
.PP
https://github.com/Chrissealed/algomaths.git
.SH VERSION
.PP
2018.12.16
.SH Cette classe est destinée à savoir si deux entiers relatifs sont
premiers entre eux
.PP
c'est\-à\-dire qu'ils ne possèdent pas de diviseurs communs autre que 1.
.PP
La classe inclue le rôle \f[B]UsualDivisibilityCriteria\f[] et intègre
la méthode \f[B]list\-divisors\f[] de la classe
\f[B]IntegerDivisorsListing\f[] dans sa méthode 1 :
.SS have\-common\-divisors(\[en]> Bool: D)
.PP
pour déterminer si deux nombres sont premiers entre eux cherchant les
diviseurs communs en comparant les listes de diviseurs de chaque nombre.
.PP
Une deuxième méthode \f[B]have\-common\-divisor\f[](Str $pgcd\-algorithm
= `euclide' \[en]> Bool:D) (notez le \f[I]singulier\f[]) utilise les
méthodes du rôle inclus dans la classe
\f[B]UsualDivisibilityCriteria\f[] chargé de coder les critères usuels
de divisibilité de deux nombres (cf.\ doc du module
\f[B]usual\-divisibility\-criteria.pm6\f[]) ainsi que la classe PGCD.
Chaque méthode renvoie un booléen b si les nombres sont premiers entre
eux ou \f[B]False\f[] dans le cas contraire.
.PP
La première méthode trouve tous les diviseurs communs tandis que la
deuxième trouve seulement le premier diviseur commun : 1 si les nombres
sont premiers entre eux ou un nombre supérieur à 1 s'ils ne le sont pas.
La classe possède deux attributs requis : \f[B]integer1\f[] et
\f[B]integer2\f[] qui doivent être des entiers différents de 0.
Tous les champs sont en lecture et écriture.
.PP
La méthode 2 utilise un paramètre,
.SS have\-common\-divisor(Str $pgcd\-algorithm = `euclide' \[en]>
Bool:D)
.PP
visant à spécifier quelle méthode de la classe PGCD sera utilisée pour
rechercher un diviseur commun à partir du nombre 25 (c'est\-à\-dire
au\-delà des critères de divisibilité).
Le paramètre peut prendre l'une des valeurs suivantes selon l'algorithme
de recherche de PGCD que l'on souhaite appliquer, c'est à dire la
méthode par divisions euclidiennes successives, ou la méthode par
soustractions, ou celle par factorization ou encore celle par
comparaison de la liste des diviseurs :
\[bu] .RS 2
.IP "1)" 3
`euclide' ou `e' ou `:' ou `÷' ou bien
.RE
\[bu] .RS 2
.IP "2)" 3
`subtraction' ou `s' ou `\-' ou `−' ou bien
.RE
\[bu] .RS 2
.IP "3)" 3
`factorization' ou `f' ou '*`ou'×' ou bien
.RE
\[bu] .RS 2
.IP "4)" 3
`divisors\-listing' ou `d' ou `#' ou `/'.
.RE
.PP
Par défaut la valeur de ce paramètre est `euclide'.
.PP
La classe possède en outre un attribut requis destiné à écrire dans un
fichier les informations qui apparaissent à l'écran et qui décrivent les
différentes étapes des opérations.
Il s'agit de \f[B]Teeput::Tput $t is required is rw\f[] : il faut lui
passer un objet de type \f[B]Teeput::Tput\f[] du module
\f[B]teeput.pm6\f[].
Référez\-vous à la doc de ce module pour plus d'informations.
