.\" Automatically generated by Pandoc 2.1.2
.\"
.TH "" "" "" "" ""
.hy
.SH NAME
.PP
\f[B]IntegerDivisorsListing\f[] : \f[B]algomaths\f[] Perl 6 module in
/maths/modules/pm6/\f[B]integer\-divisors\-listing.pm6\f[]
.SH AUTHOR
.PP
https://github.com/Chrissealed/algomaths.git
.SH VERSION
.PP
2019.01.06
.PP
for=head1 Cette classe est destinée à établir la liste des diviseurs
d'un entier relatif non nul.
.PP
Elle contient une méthode publique : \f[B]list\-divisors(Int
\f[BI]i\f[B]\f[BI]n\f[B]\f[BI]t\f[B]\f[BI]e\f[B]\f[BI]g\f[B]\f[BI]e\f[B]\f[BI]r\f[B]\f[BI]w\f[B]\f[BI]h\f[B]\f[BI]e\f[B]\f[BI]r\f[B]\f[BI]e\f[B]{integer
!= 0})\f[] et une méthode privée destinée à l'affichage d'informations.
Elle dispose du rôle \f[B]UsualDivisibilityCriteria\f[] pour calculer la
divisibilité des nombres 2, 3, 4, 5, 9, (10, 100, 1000, etc.), 11 et 25
en utilisant les critères de divisibilité les plus usuels (voir la doc
du module \f[B]usual\-divisibility\-criteria.pm6\f[]).
Pour les autres nombres, elle utilise l'opérateur \f[B]modulo\f[] (mod)
ou %% (critère de divisibilité).
.PP
Contrairement au module \f[B]integer\-divisors\-listing\-array.pm6\f[]
implémenté par l'emploi de tableaux, et qui renvoie systématiquement un
tableau, celui\-ci est implémenté par l'emploi de hash et renvoie soit
un hash, soit un tableau de Int, selon la valeur de l'attribut \f[B]Str
$array\-or\-hash\f[] qui peut prendre l'une des valeurs suivantes : `\@'
ou `array' pour renvoyer un tableau de Int ou bien `%' ou `hash' pour
renvoyer un hash de Int (%h.keys : Int et %h.values : Int).
Par défaut un array est retourné.
.PP
\f[I]Remarque\f[] : il existe aussi un module
\f[B]integer\-divisors\-listing\-hash.pm6\f[] qui est implémenté par
l'emploi de hash et qui renvoie systématiquement un hash.
.PP
L'autre attribut requis cette fois et en lecture écriture est un objet
de type \f[B]Teeput::Tput\f[].
Consultez la doc du module \f[B]teeput.pm6\f[] pour plus de détails.
